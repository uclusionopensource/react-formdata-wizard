{"version":3,"sources":["steps/ExampleFirst.js","steps/ExampleSecond.js","../../src/localStorageUtils.js","../../src/wizardReducer.js","../../src/FormdataWizard.js","steps/ExampleThird.js","steps/ExampleFourth.js","steps/ExampleFifth.js","App.js","index.js"],"names":["ExampleFirst","props","nextStep","onClick","ExampleSecond","previousStep","setStorageObject","storageKey","value","localStorage","JSON","generateLocalStorageBackedReducer","initialValue","storage","getStorageObject","Object","localStorageKey","storageBackedReducer","state","action","newState","reducer","FormdataWizard","children","name","onStartOver","onFinish","resetSetter","defaultFormData","startStep","useLocalStorage","childArray","React","useReducer","formData","formDataDispatch","initialStepState","currentStep","totalSteps","length","useState","stepState","setStepState","type","clearStorage","resetWizard","clone","increment","updateFormData","newValues","clearFormData","startOver","active","finish","getCurrentStepContents","PropTypes","bool","ExampleThird","thirdInput","onChange","event","update","target","ExampleFourth","Promise","resolve","reject","setTimeout","ExampleFifth","App","lastForm","setLastForm","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30f22ce9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ExampleFirst(props) {\n  const { nextStep } = props;\n\n  return (\n    <div>\n      First Step!\n      <button onClick={nextStep}>Next</button>\n    </div>\n  )\n\n}\n\nexport default ExampleFirst;\n","import React from 'react'\n\nfunction ExampleSecond(props) {\n  const { previousStep, nextStep } = props\n\n  return (\n    <div>\n      Second Step!\n      <button onClick={previousStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n    </div>\n  )\n}\n\nexport default ExampleSecond\n","/* eslint-disable no-undef */\n/**\n * Gets the deserialized object from local storage pointed to by storageKey,\n * or returns an empty object if one is not found\n * @param storageKey\n * @returns {{}|any}\n */\nfunction getStorageObject(storageKey) {\n  const storage = localStorage.getItem(storageKey)\n  if (!storage) {\n    return {}\n  }\n  return JSON.parse(storage)\n}\n\n/**\n * Sets the local storage object pointed to by storage key to JSON serialization of the value.\n * If value is \"falsey\", removes cleares the local storage item pointed to by the storage key\n * @param storageKey The key within local storage we're looking for\n * @param value the value to set it to\n */\nfunction setStorageObject(storageKey, value) {\n  if (value) {\n    localStorage.setItem(storageKey, JSON.stringify(value))\n  } else {\n    localStorage.removeItem(storageKey)\n  }\n}\n\n/**\n * Generated a reducer that backs all data with local storage.\n * @param localStorageKey the key to store the data under\n * @param reducer a reducer that outputs new states\n * @param defaultValue value to initialize to if nothing is stored locally\n * @returns a tuple containing\n * the transformed reducer that backs all resultant states by the local storage,\n * and any stored initial value for that reducer\n */\nexport function generateLocalStorageBackedReducer(\n  localStorageKey,\n  reducer,\n  defaultValue\n) {\n  const storageBackedReducer = (state, action) => {\n    const newState = reducer(state, action)\n    setStorageObject(localStorageKey, newState)\n    return newState\n  }\n  let initialValue = getStorageObject(localStorageKey)\n  if (Object.keys(initialValue).length === 0 && defaultValue) {\n    setStorageObject(localStorageKey, defaultValue)\n    initialValue = defaultValue\n  }\n  return { storageBackedReducer, initialValue }\n}\n\n/**\n * Empties the storage for the given local storage key\n * @param localStorageKey the key to clear data for\n */\nexport function clearStorage(localStorageKey) {\n  localStorage.removeItem(localStorageKey)\n}\n","const RESET_VALUES = 'RESET_VALUES'\nconst UPDATE_VALUES = 'UPDATE_VALUES'\n\n/**\n * Returns a message to the reducer that updates\n * the values in the state with the key/values in the\n * new values object\n * @param newValues an object whose key/values will overwrite\n * the corresponding values in the state (or be added)\n * @returns {{type: string, newValues: *}}\n */\nexport function updateValues(newValues) {\n  return {\n    type: UPDATE_VALUES,\n    newValues\n  }\n}\n\n/**\n * Returns a message to the reducer that\n * will empty out the state\n * @returns {{type: string}}\n */\nexport function resetValues() {\n  return {\n    type: RESET_VALUES\n  }\n}\n\nexport function reducer(state, action) {\n  const { type } = action\n  switch (type) {\n    case UPDATE_VALUES:\n      return {\n        ...state,\n        ...action.newValues\n      }\n    case RESET_VALUES:\n      return {}\n    default:\n      return state\n  }\n}\n","import React, { useReducer, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  clearStorage,\n  generateLocalStorageBackedReducer\n} from './localStorageUtils'\nimport { reducer, resetValues, updateValues } from './wizardReducer'\n\nfunction FormdataWizard(props) {\n  const {\n    children,\n    name,\n    onStartOver,\n    onFinish,\n    resetSetter,\n    defaultFormData,\n    startStep,\n    useLocalStorage\n  } = props\n  const childArray = React.Children.toArray(children)\n  // optionally set up a local storage backed reducer,\n  // so that we get resumes across reload, etc\n  const { storageBackedReducer, initialValue } = useLocalStorage\n    ? generateLocalStorageBackedReducer(name, reducer, defaultFormData)\n    : { storageBackedReducer: reducer, initialValue: defaultFormData }\n  const [formData, formDataDispatch] = useReducer(\n    storageBackedReducer,\n    initialValue\n  )\n  const initialStepState = {\n    currentStep: startStep, // start where we're told if not 0\n    totalSteps: childArray.length\n  }\n  // data to track what step we're on\n\n  const [stepState, setStepState] = useState(initialStepState)\n\n  /** Resetting the wizard clears the form data and sets us to the initial step state\n   *\n   */\n  function resetWizard() {\n    formDataDispatch(resetValues())\n    // we'll also manually, clear the stored data, in case we navigate away before the dispatcher fires\n    clearStorage(name)\n    // reset the step state\n    setStepState(initialStepState)\n  }\n\n  /**\n   * Start over just resets us, and calls the start over function\n   */\n  function startOver() {\n    // zero all form data\n    resetWizard()\n    onStartOver()\n  }\n\n  /**\n   * finish calls onFinish with either the passed in finish value or the form data at time of creation\n   * @param finishValue Optional, if not passed, the form data at time of bind of this function will be passed\n   */\n  function finish(finishValue) {\n    const clone = { ...formData }\n    resetWizard()\n    if (finishValue) {\n      onFinish(finishValue)\n    } else {\n      onFinish(clone)\n    }\n  }\n\n  /**\n   * nextStep advances us to the next step,\n   * if we have it - by increment if provided\n   */\n  function nextStep(increment = 1) {\n    if (stepState.currentStep >= childArray.length - increment) {\n      return\n    }\n    setStepState({\n      ...stepState,\n      currentStep: stepState.currentStep + increment\n    })\n  }\n\n  /**\n   * previousStep moves us back one step if it exists\n   */\n  function previousStep() {\n    if (stepState.currentStep === 0) {\n      return\n    }\n    setStepState({\n      ...stepState,\n      currentStep: stepState.currentStep - 1\n    })\n  }\n\n  function getCurrentStepContents() {\n    const props = {\n      ...stepState,\n      formData,\n      updateFormData: (data) => formDataDispatch(updateValues(data)),\n      clearFormData: () => formDataDispatch(resetValues()),\n      nextStep,\n      previousStep,\n      startOver,\n      active: true,\n      finish\n    }\n    const currentStep = childArray[stepState.currentStep]\n    if (!currentStep) {\n      return React.Fragment\n    }\n    // Because we use clone element here, the internal state of the element can't be maintained. Hence\n    // callers should use the formdata to pass values.\n    return React.cloneElement(currentStep, props)\n  }\n\n  resetSetter(resetWizard)\n  return getCurrentStepContents()\n}\n\nFormdataWizard.propTypes = {\n  onFinish: PropTypes.func,\n  resetSetter: PropTypes.func,\n  onStartOver: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  startStep: PropTypes.number,\n  useLocalStorage: PropTypes.bool\n}\n\nFormdataWizard.defaultProps = {\n  onFinish: () => {},\n  resetSetter: () => {},\n  onStartOver: () => {},\n  startStep: 0,\n  useLocalStorage: true\n}\n\nexport { FormdataWizard }\n","import React from 'react'\n\nfunction ExampleThird(props){\n  const { formData, updateFormData, previousStep, nextStep } = props;\n\n  function handleInputChange(event) {\n    const update = { thirdInput: event.target.value};\n    updateFormData(update)  ;\n  }\n\n  return (\n    <div>\n      Third Step! This one Saves state across reloads!\n      <button onClick={previousStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n      <textarea value={formData.thirdInput} onChange={handleInputChange}/>\n    </div>\n  )\n}\n\nexport default ExampleThird\n","import React from 'react'\n\n\nfunction ExampleFourth(props){\n  const { nextStep   } = props;\n\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      nextStep()\n      resolve(true)\n    }, 3000)\n  })\n\n  return (\n    <div>\n      Fourth Step! This one automatically advances after a 3 second pause expires!\n    </div>\n  )\n}\n\nexport default ExampleFourth\n","import React from 'react'\n\n\nfunction ExampleFifth(props){\n  const { finish } = props;\n\n\n  return (\n    <div>\n      Fifth step! Clicking finish calls onFinish, and resets the form!\n      <button onClick={() => finish()}>Finish</button>\n    </div>\n  )\n}\n\nexport default ExampleFifth\n","import React, { useState } from 'react'\nimport ExampleFirst from './steps/ExampleFirst'\nimport ExampleSecond from './steps/ExampleSecond'\nimport FormdataWizard from 'react-formdata-wizard'\nimport ExampleThird from './steps/ExampleThird'\nimport ExampleFourth from './steps/ExampleFourth'\nimport ExampleFifth from './steps/ExampleFifth'\n\n\nconst App = () => {\n  const [lastForm, setLastForm] = useState(null);\n\n\n  function onFinsh(data) {\n    setLastForm(data);\n  }\n\n  return (\n    <div>\n    <FormdataWizard name=\"foo\" onFinish={onFinsh}>\n      <ExampleFirst/>\n      <ExampleSecond/>\n      <ExampleThird/>\n      <ExampleFourth/>\n      <ExampleFifth/>\n    </FormdataWizard>\n      {lastForm && (<div>\n        Last form step 3 called with {lastForm.thirdInput}\n      </div>)}\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}